import path from 'path';
import {pluck} from "lodash";
import {listAll, listByName} from "./aws-helpers.babel";
import inquirer from "inquirer";
import Promise, {promisify} from 'bluebird';
import moment from "moment";
import {emoji} from "node-emoji";
import {test} from "shelljs";
import {spawn} from "child_process";

const KEYS_DIR = path.resolve(process.env.HOME, 'Drive');
const exit = process.exit;
const {warn, log} = console;
const prompt = (...args) => {
  return new Promise((resolve)=>{
    inquirer.prompt.apply(inquirer, args.concat(resolve));
  });
}

const name = process.argv[2];
if (!name) {
    warn('type instance name');
}

(async function() {
  const instances = await listByName(name);

  const {item} = await prompt([{
    type: "list",
    name: "item",
    message: "Select instance connect to?",
    choices: instances.map(formatItem)
  }]);

  const index = item.match(/^\d+/)[0];
  const selected = instances[index];
  ssh(selected.dns, selected.key);
})();

function ssh(dns, key) {
  const keyPath = path.join(KEYS_DIR, `${key}.pem`);

  if (!test('-f', keyPath)) {
    warn(`${keyPath} not found`);
    exit(1);
  }

  const ssh = spawn('ssh', [
    '-tt',
    '-l',
    'ec2-user',
    '-i',
    keyPath,
    dns,
    '-o',
    'StrictHostKeyChecking=no'
  ]);

  process.stdin.pipe(ssh.stdin);
  ssh.stdout.pipe(process.stdout);

  ssh.on('exit', function (code) {
    log('ssh process exit with code ' + code);
    exit(0);
  });
}

function formatItem({name, LaunchTime, InstanceId}, i) {
  const time = moment(LaunchTime).fromNow();
  return `${i} ${name} ${emoji.alarm_clock}${time} [${InstanceId}]`
}
